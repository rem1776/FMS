#!/usr/bin/sh
#***********************************************************************
#                   GNU Lesser General Public License
#
# This file is part of the GFDL Flexible Modeling System (FMS).
#
# FMS is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# FMS is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
#***********************************************************************
# Runs unit tests with very large pe counts
# runs via `make check-scaling` (only available if configured with --enable-large-tests)
# Ryan Mulhall

# Set common test settings.
. ./test-lib.sh

top_builddir='@abs_top_builddir@'

# tests to build
fms2_io_tests="test_fms2_io test_domain_io test_atmosphere_io test_io_simple"
mpp_tests="test_mpp_alltoall test_mpp_chksum test_global_arrays test_mpp_broadcast test_mpp_sum test_super_grid test_mpp_gatscat test_mpp_transmit test_domains_simple test_mpp_root_pe"

# pe count for all tests
npes=4608

# make sure all our tests are built prior to being run
cd ${top_builddir}
cd test_fms/fms2_io
make ${fms2_io_tests}
test $? -ne 0 && echo "fms2_io tests failed to build" && exit 1
cd ${top_builddir}/test_fms/mpp
make ${mpp_tests}
test $? -ne 0 && echo "mpp tests failed to build" && exit 1

# set up directories for in/out-put
cd ${top_builddir}
mkdir -p test_large
cd test_large
touch input.nml

echo "********************Using ${npes} pe's********************"

echo "Running large scale tests for fms2_io"

test_expect_success "test_fms2_io" '
  mpirun -n ${npes} ${top_builddir}/test_fms/fms2_io/test_fms2_io
'
rm -f *nc*
ls

test_expect_success "test_atmosphere_io" '
  mpirun -n ${npes} ${top_builddir}/test_fms/fms2_io/test_atmosphere_io -x 1080 -y 1080 -z 12
'
rm -f *nc*
ls

test_expect_success "test_io_simple" '
  mpirun -n ${npes} ${top_builddir}/test_fms/fms2_io/test_io_simple -x 1080 -y 1080 -z 12
'

rm -f *nc*
ls

echo "Running large scale tests for mpp"

test_expect_success "mpp_alltoall" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_mpp_alltoall
'

test_expect_success "mpp_chksum" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_mpp_chksum
'

cat <<_EOF  > input.nml
&test_global_arrays_nml
  test_simple = .true.
/
_EOF

test_expect_success "mpp_global_min/max/sum" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_global_arrays
'

test_expect_success "mpp_broadcast" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_mpp_broadcast
'

test_expect_success "mpp_gather and mpp_scatter" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_mpp_gatscat
'

test_expect_success "mpp_sum" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_mpp_sum
'

test_expect_success "mpp_domain_copy and mpp_create_supergrid" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_super_grid
'

test_expect_success "mpp_root_pe" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_mpp_root_pe
'

test_expect_success "mpp_transmit" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_mpp_transmit
'

test_expect_success "mpp_domains simple" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_domains_simple
'

test_expect_success "mpp_peset" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_peset
'

test_done

#!/usr/bin/sh
#***********************************************************************
#                   GNU Lesser General Public License
#
# This file is part of the GFDL Flexible Modeling System (FMS).
#
# FMS is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# FMS is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
#***********************************************************************
# Runs unit tests with very large pe counts
# runs via `make check-scaling` (only available if configured with --enable-large-tests)
# Ryan Mulhall

# Set common test settings.
. ./test-lib.sh

top_builddir='@abs_top_builddir@'

# tests to build
fms2_io_tests="test_fms2_io test_domain_io test_atmosphere_io test_io_simple test_bc_restart test_chunksizes test_compressed_writes test_file_appendix test_get_is_valid test_get_mosaic_tile_grid test_global_att test_io_with_mask test_packed_reads test_read_ascii_file test_unlimit_compressed"
mpp_tests="test_mpp_alltoall test_mpp_chksum test_global_arrays test_mpp_broadcast test_mpp_sum test_super_grid test_mpp_gatscat test_mpp_transmit test_domains_simple test_mpp_root_pe test_clock_init test_mpp test_mpp_clock_begin_end_id test_mpp_global_field test_mpp_get_ascii_lines test_mpp_init_logfile test_mpp_mem_dump test_mpp_global_field_ug test_peset"

# pe count for all tests
npes=4608

# make sure all our tests are built prior to being run
cd ${top_builddir}
cd test_fms/fms2_io
make ${fms2_io_tests}
test $? -ne 0 && echo "fms2_io tests failed to build" && exit 1
cd ${top_builddir}/test_fms/mpp
make ${mpp_tests}
test $? -ne 0 && echo "mpp tests failed to build" && exit 1

# set up directories for in/out-put
cd ${top_builddir}
mkdir -p test_large
cd test_large
touch input.nml

# required to run on gaea
export FI_VERBS_PREFER_XRC=0

echo "********************Using ${npes} pe's********************"

echo "Running large scale tests for fms2_io"

test_expect_success "test_fms2_io" '
  mpirun -n ${npes} ${top_builddir}/test_fms/fms2_io/test_fms2_io
'
rm -f *nc*

test_expect_success "test_atmosphere_io" '
  mpirun -n ${npes} ${top_builddir}/test_fms/fms2_io/test_atmosphere_io -x 1080 -y 1080 -z 12
'
rm -f *nc*

test_expect_success "test_io_simple" '
  mpirun -n ${npes} ${top_builddir}/test_fms/fms2_io/test_io_simple -x 1080 -y 1080 -z 12
'
rm -f *nc*


## fails from mpp broadcast with x/y=(1080,1024), layout=(36,128)
cat <<_EOF > input.nml
&test_domain_io_nml
  layout = 12, 384
  io_layout = 1, 1
  nx = 1080 
  ny = 1152
  filename = "test_simple_layout.nc"
/
_EOF

test_expect_success "test_domain_io (simple layout)" '
  mpirun -n ${npes} ${top_builddir}/test_fms/fms2_io/test_domain_io
'

## same as above, just different io layout 
cat <<_EOF > input.nml
&test_domain_io_nml
  layout = 24, 192
  io_layout = 1, 4
  nx = 1080
  ny = 1152
  filename = "test_simple_layout.nc"
/
_EOF

# 
test_expect_success "test_domain_io (distributed file)" '
  mpirun -n ${npes} ${top_builddir}/test_fms/fms2_io/test_domain_io
'

test_expect_success "test writing boundary condition restarts" '
  mpirun -n ${npes} ${top_builddir}/test_fms/fms2_io/test_bc_restart
'

test_expect_success "test chunksize" '
  mpirun -n ${npes} ${top_builddir}/test_fms/fms2_io/test_chunksizes
'

test_expect_success "test compressed writes" '
  mpirun -n ${npes} ${top_builddir}/test_fms/fms2_io/test_compressed_writes
'

test_expect_success "test file appendix" '
  mpirun -n ${npes} ${top_builddir}/test_fms/fms2_io/test_file_appendix
'

test_expect_success "test get_is_valid" '
  mpirun -n ${npes} ${top_builddir}/test_fms/fms2_io/test_get_is_valid
'

test_expect_success "test get_mosaic_tile_grid" '
  mpirun -n ${npes} ${top_builddir}/test_fms/fms2_io/test_get_mosaic_tile_grid
'

test_expect_success "test global attributes" '
  mpirun -n ${npes} ${top_builddir}/test_fms/fms2_io/test_global_att
'

test_expect_success "test io with mask" '
  mpirun -n ${npes} ${top_builddir}/test_fms/fms2_io/test_io_with_mask
'

test_expect_success "test packed reads" '
  mpirun -n ${npes} ${top_builddir}/test_fms/fms2_io/test_packed_reads
'

test_expect_success "test read ascii file" '
  mpirun -n ${npes} ${top_builddir}/test_fms/fms2_io/test_read_ascii_file
'

test_expect_success "test unlimited compressed" '
  mpirun -n ${npes} ${top_builddir}/test_fms/fms2_io/test_unlimit_compressed
'

rm -f *nc*

echo "Running large scale tests for mpp"

test_expect_success "mpp_alltoall" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_mpp_alltoall
'

test_expect_success "mpp_chksum" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_mpp_chksum
'

cat <<_EOF  > input.nml
&test_global_arrays_nml
  test_simple = .true.
/
_EOF

test_expect_success "mpp_global_min/max/sum" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_global_arrays
'

test_expect_success "mpp_broadcast" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_mpp_broadcast
'

test_expect_success "mpp_gather and mpp_scatter" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_mpp_gatscat
'

test_expect_success "mpp_sum" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_mpp_sum
'

test_expect_success "mpp_domain_copy and mpp_create_supergrid" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_super_grid
'

test_expect_success "mpp_root_pe" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_mpp_root_pe
'

test_expect_success "mpp_transmit" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_mpp_transmit
'

test_expect_success "mpp_domains simple" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_domains_simple
'

test_expect_success "mpp_peset" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_peset
'

test_expect_success "mpp_clock_id" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_clock_init
'

test_expect_success "test_mpp (mpp_sum)" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_mpp
'

echo "&test_mpp_clock_begin_end_id_nml" > clock.nml
echo "test_number = 1" >> clock.nml
echo "/" >> clock.nml

test_expect_success "mpp_clock_begin and end" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_mpp_clock_begin_end_id
'

test_expect_success "mpp_global_field" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_mpp_global_field
'

test_expect_success "mpp_global_field_ug" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_mpp_global_field
'

# create input/nml for ascii test
# just does the first 5 line test
echo "&test_mpp_get_ascii_lines_nml" > test_numb2.nml
echo "test_number = 1" >> test_numb2.nml
echo "/" >> test_numb2.nml
cat <<_EOF > ascii_5
"this is an ascii file with 5 lines"
"it will contain commas inside quotes", "as well as outside quotes"
"it will not have the same number of fields on every line"
some lines will not have quotes
"there might be a line with the character string \n"
asdf
_EOF

test_expect_success "mpp_get_ascii_lines" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_mpp_get_ascii_lines
'

test_expect_success "mpp_init_logfile" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_mpp_init_logfile
'

test_expect_success "mpp_mem_dump" '
  mpirun -n ${npes} ${top_builddir}/test_fms/mpp/test_mpp_mem_dump
'

test_done

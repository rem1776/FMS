    !> only PE 0 send data
    ssize = 0
    if ( pe == 0 ) then
       do i = 0, npes-1
          ssize(i) = 1
       end do
    end if
    sdispl = 0

    !> receive data from PE 0 only
    rsize = 0  ;  rsize(0) = 1
    rdispl = 0

    !> subarrays (portion of data) in sbuf/rbuf to send/receive
    array_of_subsizes = (/3,3,3/)
    array_of_starts = (/0,0,0/)

    !> initialize mpp_type datatype
    stype(:) = mpp_byte
    rtype(:) = mpp_byte

    !> ascribe pointers to sbuf and rbuf
    psbuf(1:size(sbuf)) => sbuf
    prbuf(1:size(rbuf)) => rbuf

    !> create mpp_type datatype
    do i=0, npes-1
       call mpp_type_create( sbuf, array_of_subsizes, array_of_starts, stype(i) )
       call mpp_type_create( rbuf, array_of_subsizes, array_of_starts, rtype(i) )
    end do

    !> mpp_alltoallW
    call mpp_alltoall( psbuf, ssize, sdispl, stype, prbuf, rsize, rdispl, stype )

    !> check
    do i=1, 3
       do j=1, 3
          do k=1, 3
             if ( rbuf(k,j,i) .ne. real(i*100 + j*10 + k, kind=r4_kind) ) call mpp_error( FATAL, 'test mpp_alltoallw fail a' )
          end do
          do k=4, n
             if ( rbuf(k,j,i) .ne. -one ) call mpp_error( FATAL, 'test mpp_alltoallw fail b' )
          end do
       end do
       do j=4, n
          do k=1, n
             if ( rbuf(k,j,i) .ne. -one ) call mpp_error( FATAL, 'test mpp_alltoallw fail' )
          end do
       end do
    end do
    do i=4, n
       do j=1, n
          do k=1, n
             if ( rbuf(k,j,i) .ne. -one ) call mpp_error( FATAL, 'test mpp_alltoallw fail' )
          end do
       end do
    end do